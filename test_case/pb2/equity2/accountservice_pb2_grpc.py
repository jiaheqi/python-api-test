# -*- coding: UTF-8 -*-
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import accountservice_pb2 as accountservice__pb2


class AccountServiceStub(object):
  """账户的开户、修改、查询
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.personalOpenAccount = channel.unary_unary(
        '/AccountService/personalOpenAccount',
        request_serializer=accountservice__pb2.PersonalOpenAccountReq.SerializeToString,
        response_deserializer=accountservice__pb2.PersonalOpenAccountRes.FromString,
        )
    self.updateAccountInfo = channel.unary_unary(
        '/AccountService/updateAccountInfo',
        request_serializer=accountservice__pb2.UpdateAccountInfoRequest.SerializeToString,
        response_deserializer=accountservice__pb2.UpdateAccountInfoResponse.FromString,
        )
    self.queryMerchantInfo = channel.unary_unary(
        '/AccountService/queryMerchantInfo',
        request_serializer=accountservice__pb2.QueryMerchantInfoRequest.SerializeToString,
        response_deserializer=accountservice__pb2.QueryMerchantInfoResponse.FromString,
        )
    self.transAccountNature = channel.unary_unary(
        '/AccountService/transAccountNature',
        request_serializer=accountservice__pb2.AccountNatureRequest.SerializeToString,
        response_deserializer=accountservice__pb2.AccountNatureResponse.FromString,
        )
    self.openAccount = channel.unary_unary(
        '/AccountService/openAccount',
        request_serializer=accountservice__pb2.OpenAccountRequest.SerializeToString,
        response_deserializer=accountservice__pb2.OpenAccountResponse.FromString,
        )
    self.queryBalance = channel.unary_unary(
        '/AccountService/queryBalance',
        request_serializer=accountservice__pb2.QueryBalanceReq.SerializeToString,
        response_deserializer=accountservice__pb2.QueryBalanceRes.FromString,
        )
    self.queryAccountList = channel.unary_unary(
        '/AccountService/queryAccountList',
        request_serializer=accountservice__pb2.QueryAccountListRequest.SerializeToString,
        response_deserializer=accountservice__pb2.QueryAccountListResponse.FromString,
        )
    self.freezeAccount = channel.unary_unary(
        '/AccountService/freezeAccount',
        request_serializer=accountservice__pb2.FreezeAccountRequest.SerializeToString,
        response_deserializer=accountservice__pb2.FreezeAccountResponse.FromString,
        )
    self.creditAccount = channel.unary_unary(
        '/AccountService/creditAccount',
        request_serializer=accountservice__pb2.CreditAmountRequest.SerializeToString,
        response_deserializer=accountservice__pb2.CreditAmountResponse.FromString,
        )


class AccountServiceServicer(object):
  """账户的开户、修改、查询
  """

  def personalOpenAccount(self, request, context):
    """个人开户
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def updateAccountInfo(self, request, context):
    """账户信息修改
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def queryMerchantInfo(self, request, context):
    """查询账户信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def transAccountNature(self, request, context):
    """转换账户性质
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def openAccount(self, request, context):
    """企业开户
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def queryBalance(self, request, context):
    """余额查询（个人企业通用）
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def queryAccountList(self, request, context):
    """企业账户列表查询
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def freezeAccount(self, request, context):
    """账户冻结、解冻
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def creditAccount(self, request, context):
    """设置透支额度
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AccountServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'personalOpenAccount': grpc.unary_unary_rpc_method_handler(
          servicer.personalOpenAccount,
          request_deserializer=accountservice__pb2.PersonalOpenAccountReq.FromString,
          response_serializer=accountservice__pb2.PersonalOpenAccountRes.SerializeToString,
      ),
      'updateAccountInfo': grpc.unary_unary_rpc_method_handler(
          servicer.updateAccountInfo,
          request_deserializer=accountservice__pb2.UpdateAccountInfoRequest.FromString,
          response_serializer=accountservice__pb2.UpdateAccountInfoResponse.SerializeToString,
      ),
      'queryMerchantInfo': grpc.unary_unary_rpc_method_handler(
          servicer.queryMerchantInfo,
          request_deserializer=accountservice__pb2.QueryMerchantInfoRequest.FromString,
          response_serializer=accountservice__pb2.QueryMerchantInfoResponse.SerializeToString,
      ),
      'transAccountNature': grpc.unary_unary_rpc_method_handler(
          servicer.transAccountNature,
          request_deserializer=accountservice__pb2.AccountNatureRequest.FromString,
          response_serializer=accountservice__pb2.AccountNatureResponse.SerializeToString,
      ),
      'openAccount': grpc.unary_unary_rpc_method_handler(
          servicer.openAccount,
          request_deserializer=accountservice__pb2.OpenAccountRequest.FromString,
          response_serializer=accountservice__pb2.OpenAccountResponse.SerializeToString,
      ),
      'queryBalance': grpc.unary_unary_rpc_method_handler(
          servicer.queryBalance,
          request_deserializer=accountservice__pb2.QueryBalanceReq.FromString,
          response_serializer=accountservice__pb2.QueryBalanceRes.SerializeToString,
      ),
      'queryAccountList': grpc.unary_unary_rpc_method_handler(
          servicer.queryAccountList,
          request_deserializer=accountservice__pb2.QueryAccountListRequest.FromString,
          response_serializer=accountservice__pb2.QueryAccountListResponse.SerializeToString,
      ),
      'freezeAccount': grpc.unary_unary_rpc_method_handler(
          servicer.freezeAccount,
          request_deserializer=accountservice__pb2.FreezeAccountRequest.FromString,
          response_serializer=accountservice__pb2.FreezeAccountResponse.SerializeToString,
      ),
      'creditAccount': grpc.unary_unary_rpc_method_handler(
          servicer.creditAccount,
          request_deserializer=accountservice__pb2.CreditAmountRequest.FromString,
          response_serializer=accountservice__pb2.CreditAmountResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'AccountService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
